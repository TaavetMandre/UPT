[gd_scene load_steps=33 format=3 uid="uid://bs4t8lbvflsle"]

[ext_resource type="Script" path="res://Content/Other/Spells/spell_deploy_bar_master.gd" id="1_2olev"]
[ext_resource type="Shader" path="res://Textures/sidebar.gdshader" id="1_u46bc"]
[ext_resource type="Script" path="res://Content/Other/Spells/Bar.gd" id="3_y7yvf"]
[ext_resource type="Shader" path="res://Content/Other/Spells/balatrocardthingy.gdshader" id="4_ymv5u"]
[ext_resource type="Texture2D" uid="uid://tmwp5cedwldk" path="res://Textures/lightning.svg" id="6_qhv4f"]
[ext_resource type="Script" path="res://Content/Other/Spells/untoolbalatrocard.gd" id="6_u1s5u"]
[ext_resource type="PackedScene" uid="uid://c0ehtogoo644u" path="res://Content/Other/Spells/lightning.tscn" id="7_jcw33"]
[ext_resource type="PackedScene" uid="uid://1ul8feuckgc6" path="res://Content/Other/Spells/spherical spell indicator.tscn" id="9_kin2f"]
[ext_resource type="PackedScene" uid="uid://d3fcfy48iisy7" path="res://Content/Other/Spells/wave_spell.tscn" id="10_dvy8s"]
[ext_resource type="Texture2D" uid="uid://bm55jpo3nnc7v" path="res://Textures/tsunami.svg" id="10_sqydg"]
[ext_resource type="PackedScene" uid="uid://cy0r1gla4opln" path="res://Content/Other/Spells/beanical spell indicator.tscn" id="11_ofpea"]
[ext_resource type="PackedScene" uid="uid://druka17jmb5a1" path="res://Content/Other/Spells/poison.tscn" id="12_3fmyp"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_o0wks"]
noise_type = 4
domain_warp_fractal_gain = 37.175
metadata/_preview_in_3d_space_ = true

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vf6w1"]
width = 650
height = 200
seamless = true
seamless_blend_skirt = 0.283
bump_strength = 32.0
noise = SubResource("FastNoiseLite_o0wks")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lexd7"]
shader = ExtResource("1_u46bc")
shader_parameter/scroll_speed = Vector2(0.005, 0)
shader_parameter/direction = Vector2(1, 0)
shader_parameter/noise_speed = 0.01
shader_parameter/gradient_start = 1.0
shader_parameter/gradient_end = 0.75
shader_parameter/color_reduction = 1.0
shader_parameter/noise = SubResource("NoiseTexture2D_vf6w1")

[sub_resource type="Gradient" id="Gradient_lnvg3"]
offsets = PackedFloat32Array(0, 0.5, 1)
colors = PackedColorArray(0, 1, 1, 1, 0.433333, 0, 1, 1, 0, 1, 1, 1)
metadata/_snap_count = 4
metadata/_snap_enabled = true

[sub_resource type="GradientTexture2D" id="GradientTexture2D_iqip1"]
gradient = SubResource("Gradient_lnvg3")
width = 500
height = 200
fill_from = Vector2(1, 1)
fill_to = Vector2(0, 1)
metadata/_snap_enabled = true

[sub_resource type="ShaderMaterial" id="ShaderMaterial_utdb3"]
shader = ExtResource("4_ymv5u")
shader_parameter/mouse_position = null
shader_parameter/sprite_position = null
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 1.0
shader_parameter/tilt_amplitude = 30.0
shader_parameter/max_distance = 500.0
shader_parameter/foilcolor = Color(1, 0, 0, 1)
shader_parameter/threshold = 0.1
shader_parameter/period = 1.0
shader_parameter/scroll = 1.0
shader_parameter/sin_threshold = 1.0
shader_parameter/foil_threshold = 0.1
shader_parameter/normal_strength = 0.1
shader_parameter/effect_alpha_mult = 0.0
shader_parameter/direction = 0.5

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vf3ll"]
shader = ExtResource("4_ymv5u")
shader_parameter/mouse_position = null
shader_parameter/sprite_position = null
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 1.0
shader_parameter/tilt_amplitude = 30.0
shader_parameter/max_distance = 500.0
shader_parameter/foilcolor = Color(0, 0, 0, 1)
shader_parameter/threshold = 0.1
shader_parameter/period = 1.0
shader_parameter/scroll = 1.0
shader_parameter/sin_threshold = 1.0
shader_parameter/foil_threshold = 0.1
shader_parameter/normal_strength = 0.1
shader_parameter/effect_alpha_mult = 1.0
shader_parameter/direction = 0.5

[sub_resource type="Shader" id="Shader_r7eyl"]
code = "shader_type canvas_item;

group_uniforms code_set_parameters;
uniform vec2 mouse_position;
uniform vec2 sprite_position;

group_uniforms mouse_looker;
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
//uniform float y_rot : hint_range(-180, 180) = 0.0; From original shader -- https://godotshaders.com/shader/2d-perspective/
//uniform float x_rot : hint_range(-180, 180) = 0.0;
//Amount to inset the image by, a higher value means the image is smaller but less likely to go outside of the \"bounds\" of the original sprite size.
uniform float inset : hint_range(0, 1) = 0.0;
//Max tilt. 2 means the sprite goes all the way to one side, and the plane is parrelel to the 2d camera.
uniform float max_tilt : hint_range(0,2.0) = 1.0;
varying flat vec2 o;
varying vec3 p;
uniform float tilt_amplitude = 30.0;
uniform float max_distance = 500.0;

group_uniforms foil_uniforms;
//The color of the foil.
uniform vec3 foilcolor : source_color;
uniform float threshold = 0.1;
uniform float period = 1;
uniform float scroll = 1;
uniform float sin_threshold = 1.0;
uniform float foil_threshold = 0.1;
uniform float normal_strength = .1;
uniform float effect_alpha_mult : hint_range(0,1) = 1.0;
uniform float direction : hint_range(0,1) = 0.5;

uniform sampler2D foil_mask;
uniform sampler2D gradient;
uniform sampler2D noise;
uniform sampler2D normal_map;

varying smooth vec2 direction_to;
varying smooth vec2 passthrough;

float inverse_lerp(float v, float a, float b){
	return (v - a) / (b - a);
}

mat2 to_rotated(float angle){
	return mat2(vec2(cos(angle),-sin(angle)),
				vec2(sin(angle),cos(angle)));
}

vec3 rotate_vector(vec3 v, float angleX, float angleY, float magnitude) {
	// Create rotation matrices for X and Y axes.
	mat3 rotX = mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, cos(angleX), -sin(angleX)),
		vec3(0.0, sin(angleX), cos(angleX))
	);
	mat3 rotY = mat3(
		vec3(cos(angleY), 0.0, sin(angleY)),
		vec3(0.0, 1.0, 0.0),
		vec3(-sin(angleY), 0.0, cos(angleY))
	);
	// Combine the rotations. Order matters! Y then X is common.
	mat3 combinedRotation = rotX * rotY; // Apply Y rotation first, then X.
	// Rotate the vector.
	vec3 rotatedVector = combinedRotation * v;
	// Apply magnitude
	rotatedVector = normalize(rotatedVector) * magnitude;
	return rotatedVector;
}

void vertex(){
	direction_to = mouse_position - sprite_position;
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	
	float sin_b = sin( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float cos_b = cos( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float sin_c = sin( (x_rota - .5) * magnitude * (PI / 2.0) );
	float cos_c = cos( (x_rota - .5) * magnitude * (PI / 2.0) );
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	//culls the back somehow
	if (cull_back && p.z <= 0.0) discard;
	//get the UV from based on the tilt from the vertex function
	vec2 uv = (p.xy / p.z).xy - o;
	vec2 adjusted_uv = uv + 0.5;
	//get the color texture
	vec4 albedo_tex = texture(TEXTURE, adjusted_uv);
	COLOR = albedo_tex;
	vec4 mask = texture(foil_mask,adjusted_uv);
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	vec3 normal_map_tex = texture(normal_map,adjusted_uv).rgb * 2.0 - 1.0;
	vec3 normal = rotate_vector(vec3(1.0,1.0,1.0),x_rota,y_rota,magnitude * magnitude);
	normal *= dot(normal_map_tex,vec3(x_rota,y_rota,0.0)) * normal_strength;
	//normal *= normal_map_tex * normal_strength;
	vec4 noise_tex = texture(noise,adjusted_uv);
	vec2 gradiant_sample = vec2((0.25+(normal.y*direction*2.0-normal.x*(1.0-direction)*2.0)/2.0+(uv.y*direction+uv.x*(1.0-direction))/2.0), 0.0);
	gradiant_sample += vec2(magnitude,0.0) * scroll;
	gradiant_sample = mod((gradiant_sample+adjusted_uv) * period,1.0);
	vec4 gradient_tex = texture(gradient, gradiant_sample);
	float strength = effect_alpha_mult * mask.r * (1.0 - length(foilcolor - albedo_tex.rgb) * foil_threshold);
	COLOR.rgb = mix(albedo_tex.rgb, gradient_tex.rgb*(noise_tex.rgb*2.0), strength);//(effect_alpha_mult-length(albedo_tex))*gradient_tex.a*effect_alpha_mult);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}
//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0ryng"]
shader = SubResource("Shader_r7eyl")
shader_parameter/mouse_position = null
shader_parameter/sprite_position = null
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 1.0
shader_parameter/tilt_amplitude = 30.0
shader_parameter/max_distance = 500.0
shader_parameter/foilcolor = null
shader_parameter/threshold = 0.1
shader_parameter/period = 1.0
shader_parameter/scroll = 1.0
shader_parameter/sin_threshold = 1.0
shader_parameter/foil_threshold = 0.1
shader_parameter/normal_strength = 0.1
shader_parameter/effect_alpha_mult = 0.0
shader_parameter/direction = 0.5

[sub_resource type="Shader" id="Shader_0sqlq"]
code = "shader_type canvas_item;

group_uniforms code_set_parameters;
uniform vec2 mouse_position;
uniform vec2 sprite_position;

group_uniforms mouse_looker;
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
//uniform float y_rot : hint_range(-180, 180) = 0.0; From original shader -- https://godotshaders.com/shader/2d-perspective/
//uniform float x_rot : hint_range(-180, 180) = 0.0;
//Amount to inset the image by, a higher value means the image is smaller but less likely to go outside of the \"bounds\" of the original sprite size.
uniform float inset : hint_range(0, 1) = 0.0;
//Max tilt. 2 means the sprite goes all the way to one side, and the plane is parrelel to the 2d camera.
uniform float max_tilt : hint_range(0,2.0) = 1.0;
varying flat vec2 o;
varying vec3 p;
uniform float tilt_amplitude = 30.0;
uniform float max_distance = 500.0;

group_uniforms foil_uniforms;
//The color of the foil.
uniform vec3 foilcolor : source_color;
uniform float threshold = 0.1;
uniform float period = 1;
uniform float scroll = 1;
uniform float sin_threshold = 1.0;
uniform float foil_threshold = 0.1;
uniform float normal_strength = .1;
uniform float effect_alpha_mult : hint_range(0,1) = 1.0;
uniform float direction : hint_range(0,1) = 0.5;

uniform sampler2D foil_mask;
uniform sampler2D gradient;
uniform sampler2D noise;
uniform sampler2D normal_map;

varying smooth vec2 direction_to;
varying smooth vec2 passthrough;

float inverse_lerp(float v, float a, float b){
	return (v - a) / (b - a);
}

mat2 to_rotated(float angle){
	return mat2(vec2(cos(angle),-sin(angle)),
				vec2(sin(angle),cos(angle)));
}

vec3 rotate_vector(vec3 v, float angleX, float angleY, float magnitude) {
	// Create rotation matrices for X and Y axes.
	mat3 rotX = mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, cos(angleX), -sin(angleX)),
		vec3(0.0, sin(angleX), cos(angleX))
	);
	mat3 rotY = mat3(
		vec3(cos(angleY), 0.0, sin(angleY)),
		vec3(0.0, 1.0, 0.0),
		vec3(-sin(angleY), 0.0, cos(angleY))
	);
	// Combine the rotations. Order matters! Y then X is common.
	mat3 combinedRotation = rotX * rotY; // Apply Y rotation first, then X.
	// Rotate the vector.
	vec3 rotatedVector = combinedRotation * v;
	// Apply magnitude
	rotatedVector = normalize(rotatedVector) * magnitude;
	return rotatedVector;
}

void vertex(){
	direction_to = mouse_position - sprite_position;
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	
	float sin_b = sin( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float cos_b = cos( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float sin_c = sin( (x_rota - .5) * magnitude * (PI / 2.0) );
	float cos_c = cos( (x_rota - .5) * magnitude * (PI / 2.0) );
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	//culls the back somehow
	if (cull_back && p.z <= 0.0) discard;
	//get the UV from based on the tilt from the vertex function
	vec2 uv = (p.xy / p.z).xy - o;
	vec2 adjusted_uv = uv + 0.5;
	//get the color texture
	vec4 albedo_tex = texture(TEXTURE, adjusted_uv);
	COLOR = albedo_tex;
	vec4 mask = texture(foil_mask,adjusted_uv);
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	vec3 normal_map_tex = texture(normal_map,adjusted_uv).rgb * 2.0 - 1.0;
	vec3 normal = rotate_vector(vec3(1.0,1.0,1.0),x_rota,y_rota,magnitude * magnitude);
	normal *= dot(normal_map_tex,vec3(x_rota,y_rota,0.0)) * normal_strength;
	//normal *= normal_map_tex * normal_strength;
	vec4 noise_tex = texture(noise,adjusted_uv);
	vec2 gradiant_sample = vec2((0.25+(normal.y*direction*2.0-normal.x*(1.0-direction)*2.0)/2.0+(uv.y*direction+uv.x*(1.0-direction))/2.0), 0.0);
	gradiant_sample += vec2(magnitude,0.0) * scroll;
	gradiant_sample = mod((gradiant_sample+adjusted_uv) * period,1.0);
	vec4 gradient_tex = texture(gradient, gradiant_sample);
	float strength = effect_alpha_mult * mask.r * (1.0 - length(foilcolor - albedo_tex.rgb) * foil_threshold);
	COLOR.rgb = mix(albedo_tex.rgb, gradient_tex.rgb*(noise_tex.rgb*2.0), strength);//(effect_alpha_mult-length(albedo_tex))*gradient_tex.a*effect_alpha_mult);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}
//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iy4w8"]
shader = SubResource("Shader_0sqlq")
shader_parameter/mouse_position = null
shader_parameter/sprite_position = null
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 1.0
shader_parameter/tilt_amplitude = 30.0
shader_parameter/max_distance = 500.0
shader_parameter/foilcolor = null
shader_parameter/threshold = 0.1
shader_parameter/period = 1.0
shader_parameter/scroll = 1.0
shader_parameter/sin_threshold = 1.0
shader_parameter/foil_threshold = 0.1
shader_parameter/normal_strength = 0.1
shader_parameter/effect_alpha_mult = 0.0
shader_parameter/direction = 0.5

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_gfece"]
load_path = "res://.godot/imported/tsunami.svg-2188736ee5ebaf7b12e9ed74ae1ea0ac.ctex"

[sub_resource type="Gradient" id="Gradient_nyfkn"]
colors = PackedColorArray(1, 0.1, 0.1, 0.784314, 1, 0.25, 0.25, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_yusl4"]
gradient = SubResource("Gradient_nyfkn")
fill_from = Vector2(1, 0.1)
metadata/_snap_enabled = true

[sub_resource type="SystemFont" id="SystemFont_f0mid"]
subpixel_positioning = 0

[sub_resource type="LabelSettings" id="LabelSettings_g6f8v"]
font = SubResource("SystemFont_f0mid")
font_size = 48

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_o1xto"]
bg_color = Color(0.368627, 0.478431, 0.619608, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_gcisf"]
bg_color = Color(0.3864, 0.67988, 0.92, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_fl3ye"]
bg_color = Color(0.35, 0.5, 0.4175, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_jipmj"]
bg_color = Color(0, 0.76, 0.266, 1)

[node name="Spell deploy bar" type="Control" node_paths=PackedStringArray("spells")]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_2olev")
spells = [NodePath("Lightning spell"), NodePath("Wave spell"), NodePath("Poison spell")]
metadata/_edit_lock_ = true

[node name="Bar" type="TextureRect" parent="." groups=["cardbar"]]
material = SubResource("ShaderMaterial_lexd7")
layout_mode = 1
anchors_preset = -1
anchor_left = 0.331
anchor_top = 0.815
anchor_right = 0.669
anchor_bottom = 1.0
offset_left = -0.520081
offset_top = -0.200073
offset_right = 0.519897
grow_horizontal = 2
grow_vertical = 0
texture = SubResource("GradientTexture2D_iqip1")
script = ExtResource("3_y7yvf")

[node name="Spell guide" type="HBoxContainer" parent="."]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = -1
anchor_left = 0.383
anchor_top = 0.104
anchor_right = 0.617
anchor_bottom = 0.198
offset_left = -0.359985
offset_top = 787.68
offset_right = 0.359985
offset_bottom = 787.556
grow_horizontal = 2

[node name="Label" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Spell 1 Position" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Label2" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Spell 2 Position" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Label3" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Spell 3 Position" type="Label" parent="Spell guide"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_alignment = 1
vertical_alignment = 1

[node name="Lightning spell" type="Sprite2D" parent="." node_paths=PackedStringArray("card_position_guide", "card_show_area") groups=["spellcards"]]
material = SubResource("ShaderMaterial_utdb3")
position = Vector2(813, 1225)
texture = ExtResource("6_qhv4f")
script = ExtResource("6_u1s5u")
card_position_guide = NodePath("../Spell guide/Spell 1 Position")
card_show_area = NodePath("../Card Show Area")
spell_scene = ExtResource("7_jcw33")
indicator_scene = ExtResource("9_kin2f")

[node name="Spellcard hitbox" type="Control" parent="Lightning spell"]
material = SubResource("ShaderMaterial_vf3ll")
layout_mode = 3
anchor_top = 0.144
anchor_right = 1.004
anchor_bottom = 0.856
offset_left = -64.0
offset_top = -89.92
offset_right = -63.508
offset_bottom = -90.08

[node name="ColorRect" type="ColorRect" parent="Lightning spell"]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -64.0
offset_top = -64.0
offset_right = -64.0
offset_bottom = -64.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(1, 1, 0, 0.196078)

[node name="Wave spell" type="Sprite2D" parent="." node_paths=PackedStringArray("card_position_guide", "card_show_area") groups=["spellcards"]]
material = SubResource("ShaderMaterial_0ryng")
position = Vector2(956, 1225)
texture = ExtResource("10_sqydg")
script = ExtResource("6_u1s5u")
card_position_guide = NodePath("../Spell guide/Spell 2 Position")
card_show_area = NodePath("../Card Show Area")
spell_scene = ExtResource("10_dvy8s")
indicator_scene = ExtResource("11_ofpea")
cost = 5

[node name="Spellcard hitbox" type="Control" parent="Wave spell"]
material = SubResource("ShaderMaterial_vf3ll")
layout_mode = 3
anchor_top = 0.144
anchor_right = 1.0
anchor_bottom = 0.856
offset_left = -64.0
offset_top = -89.92
offset_right = -63.0
offset_bottom = -90.08

[node name="ColorRect2" type="ColorRect" parent="Wave spell"]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -64.0
offset_top = -64.0
offset_right = -64.0
offset_bottom = -64.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0, 0, 1, 0.196078)

[node name="Poison spell" type="Sprite2D" parent="." node_paths=PackedStringArray("card_position_guide", "card_show_area") groups=["spellcards"]]
material = SubResource("ShaderMaterial_iy4w8")
position = Vector2(1098, 1228)
rotation = 3.14159
texture = SubResource("CompressedTexture2D_gfece")
script = ExtResource("6_u1s5u")
card_position_guide = NodePath("../Spell guide/Spell 3 Position")
card_show_area = NodePath("../Card Show Area")
spell_scene = ExtResource("12_3fmyp")
indicator_scene = ExtResource("9_kin2f")

[node name="Spellcard hitbox" type="Control" parent="Poison spell"]
material = SubResource("ShaderMaterial_vf3ll")
layout_mode = 3
anchor_top = 0.144
anchor_right = 1.0
anchor_bottom = 0.856
offset_left = -64.0
offset_top = -89.92
offset_right = -63.0
offset_bottom = -90.08

[node name="ColorRect2" type="ColorRect" parent="Poison spell"]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -64.0
offset_top = -64.0
offset_right = -64.0
offset_bottom = -64.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0, 0, 1, 0.196078)

[node name="Card Show Area" type="Control" parent="."]
unique_name_in_owner = true
layout_mode = 1
anchor_top = 0.763
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = -0.0400391
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 2

[node name="Debug Visibility" type="ColorRect" parent="Card Show Area"]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(1, 1, 1, 0.152941)
metadata/_edit_lock_ = true

[node name="DismissArea" type="TextureRect" parent="Card Show Area"]
unique_name_in_owner = true
modulate = Color(1, 1, 1, 0)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
texture = SubResource("GradientTexture2D_yusl4")
metadata/_edit_lock_ = true

[node name="Label" type="Label" parent="Card Show Area/DismissArea"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -219.5
offset_top = -33.5
offset_right = 219.5
offset_bottom = 33.5
grow_horizontal = 2
grow_vertical = 2
text = "DISMISS/KATKESTA"
label_settings = SubResource("LabelSettings_g6f8v")
horizontal_alignment = 1
vertical_alignment = 1

[node name="ColorRect" type="ColorRect" parent="Card Show Area/DismissArea/Label"]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
metadata/_edit_lock_ = true

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.383
anchor_top = 0.931
anchor_right = 0.617
anchor_bottom = 1.0
offset_left = -0.360046
offset_top = -0.480042
offset_right = 0.359863
grow_horizontal = 2
grow_vertical = 0
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 0
theme_override_constants/margin_right = 5
theme_override_constants/margin_bottom = 10

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 5

[node name="Mana" type="ProgressBar" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/background = SubResource("StyleBoxFlat_o1xto")
theme_override_styles/fill = SubResource("StyleBoxFlat_gcisf")
value = 60.0
show_percentage = false

[node name="Hp" type="ProgressBar" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/background = SubResource("StyleBoxFlat_fl3ye")
theme_override_styles/fill = SubResource("StyleBoxFlat_jipmj")
value = 75.0
show_percentage = false

[connection signal="gui_input" from="Bar" to="Bar" method="_on_gui_input"]
[connection signal="gui_input" from="Lightning spell/Spellcard hitbox" to="Lightning spell" method="_on_texture_rect_gui_input"]
[connection signal="mouse_entered" from="Lightning spell/Spellcard hitbox" to="Lightning spell" method="_on_mouse_entered"]
[connection signal="mouse_exited" from="Lightning spell/Spellcard hitbox" to="Lightning spell" method="_on_mouse_exited"]
[connection signal="gui_input" from="Wave spell/Spellcard hitbox" to="Wave spell" method="_on_texture_rect_gui_input"]
[connection signal="mouse_entered" from="Wave spell/Spellcard hitbox" to="Wave spell" method="_on_mouse_entered"]
[connection signal="mouse_exited" from="Wave spell/Spellcard hitbox" to="Wave spell" method="_on_mouse_exited"]
[connection signal="gui_input" from="Poison spell/Spellcard hitbox" to="Poison spell" method="_on_texture_rect_gui_input"]
[connection signal="mouse_entered" from="Poison spell/Spellcard hitbox" to="Poison spell" method="_on_mouse_entered"]
[connection signal="mouse_exited" from="Poison spell/Spellcard hitbox" to="Poison spell" method="_on_mouse_exited"]
